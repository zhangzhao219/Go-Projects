// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user_feature.proto

package user_feature

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserFeatureCache struct {
	ClickList            []string         `protobuf:"bytes,1,rep,name=clickList,proto3" json:"clickList,omitempty"`
	ClickTimeList        []string         `protobuf:"bytes,2,rep,name=clickTimeList,proto3" json:"clickTimeList,omitempty"`
	PlayList             []string         `protobuf:"bytes,3,rep,name=playList,proto3" json:"playList,omitempty"`
	PlayTimeList         []string         `protobuf:"bytes,4,rep,name=playTimeList,proto3" json:"playTimeList,omitempty"`
	PlayListT1           []string         `protobuf:"bytes,5,rep,name=playListT1,proto3" json:"playListT1,omitempty"`
	PlayTimeListT1       []string         `protobuf:"bytes,6,rep,name=playTimeListT1,proto3" json:"playTimeListT1,omitempty"`
	PlayIdx              map[string]int64 `protobuf:"bytes,7,rep,name=playIdx,proto3" json:"playIdx,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UserFeatureCache) Reset()         { *m = UserFeatureCache{} }
func (m *UserFeatureCache) String() string { return proto.CompactTextString(m) }
func (*UserFeatureCache) ProtoMessage()    {}
func (*UserFeatureCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fbdc1bc1f6dcf49, []int{0}
}
func (m *UserFeatureCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserFeatureCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserFeatureCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserFeatureCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserFeatureCache.Merge(m, src)
}
func (m *UserFeatureCache) XXX_Size() int {
	return m.Size()
}
func (m *UserFeatureCache) XXX_DiscardUnknown() {
	xxx_messageInfo_UserFeatureCache.DiscardUnknown(m)
}

var xxx_messageInfo_UserFeatureCache proto.InternalMessageInfo

func (m *UserFeatureCache) GetClickList() []string {
	if m != nil {
		return m.ClickList
	}
	return nil
}

func (m *UserFeatureCache) GetClickTimeList() []string {
	if m != nil {
		return m.ClickTimeList
	}
	return nil
}

func (m *UserFeatureCache) GetPlayList() []string {
	if m != nil {
		return m.PlayList
	}
	return nil
}

func (m *UserFeatureCache) GetPlayTimeList() []string {
	if m != nil {
		return m.PlayTimeList
	}
	return nil
}

func (m *UserFeatureCache) GetPlayListT1() []string {
	if m != nil {
		return m.PlayListT1
	}
	return nil
}

func (m *UserFeatureCache) GetPlayTimeListT1() []string {
	if m != nil {
		return m.PlayTimeListT1
	}
	return nil
}

func (m *UserFeatureCache) GetPlayIdx() map[string]int64 {
	if m != nil {
		return m.PlayIdx
	}
	return nil
}

func init() {
	proto.RegisterType((*UserFeatureCache)(nil), "user_feature_datawarehouse.UserFeatureCache")
	proto.RegisterMapType((map[string]int64)(nil), "user_feature_datawarehouse.UserFeatureCache.PlayIdxEntry")
}

func init() { proto.RegisterFile("user_feature.proto", fileDescriptor_2fbdc1bc1f6dcf49) }

var fileDescriptor_2fbdc1bc1f6dcf49 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x2d, 0x4e, 0x2d,
	0x8a, 0x4f, 0x4b, 0x4d, 0x2c, 0x29, 0x2d, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92,
	0x42, 0x16, 0x8b, 0x4f, 0x49, 0x2c, 0x49, 0x2c, 0x4f, 0x2c, 0x4a, 0xcd, 0xc8, 0x2f, 0x2d, 0x4e,
	0x55, 0x7a, 0xcf, 0xc4, 0x25, 0x10, 0x5a, 0x9c, 0x5a, 0xe4, 0x06, 0x91, 0x75, 0x4e, 0x4c, 0xce,
	0x48, 0x15, 0x92, 0xe1, 0xe2, 0x4c, 0xce, 0xc9, 0x4c, 0xce, 0xf6, 0xc9, 0x2c, 0x2e, 0x91, 0x60,
	0x54, 0x60, 0xd6, 0xe0, 0x0c, 0x42, 0x08, 0x08, 0xa9, 0x70, 0xf1, 0x82, 0x39, 0x21, 0x99, 0xb9,
	0xa9, 0x60, 0x15, 0x4c, 0x60, 0x15, 0xa8, 0x82, 0x42, 0x52, 0x5c, 0x1c, 0x05, 0x39, 0x89, 0x95,
	0x60, 0x05, 0xcc, 0x60, 0x05, 0x70, 0xbe, 0x90, 0x12, 0x17, 0x0f, 0x88, 0x0d, 0x37, 0x80, 0x05,
	0x2c, 0x8f, 0x22, 0x26, 0x24, 0xc7, 0xc5, 0x05, 0x53, 0x1f, 0x62, 0x28, 0xc1, 0x0a, 0x56, 0x81,
	0x24, 0x22, 0xa4, 0xc6, 0xc5, 0x87, 0xac, 0x3e, 0xc4, 0x50, 0x82, 0x0d, 0xac, 0x06, 0x4d, 0x54,
	0x28, 0x98, 0x8b, 0x1d, 0x24, 0xe2, 0x99, 0x52, 0x21, 0xc1, 0xae, 0xc0, 0xac, 0xc1, 0x6d, 0x64,
	0xa9, 0x87, 0x3b, 0x38, 0xf4, 0xd0, 0x83, 0x42, 0x2f, 0x00, 0xa2, 0xd7, 0x35, 0xaf, 0xa4, 0xa8,
	0x32, 0x08, 0x66, 0x92, 0x94, 0x15, 0x17, 0x0f, 0xb2, 0x84, 0x90, 0x00, 0x17, 0x73, 0x76, 0x6a,
	0xa5, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x88, 0x29, 0x24, 0xc2, 0xc5, 0x5a, 0x96, 0x98,
	0x53, 0x9a, 0x2a, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x1c, 0x04, 0xe1, 0x58, 0x31, 0x59, 0x30, 0x3a,
	0xc9, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e,
	0xcb, 0x31, 0x44, 0xf1, 0xea, 0x23, 0xbb, 0x28, 0x89, 0x0d, 0x1c, 0x6b, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x6d, 0xda, 0x21, 0xb4, 0xcb, 0x01, 0x00, 0x00,
}

func (m *UserFeatureCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserFeatureCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserFeatureCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayIdx) > 0 {
		for k := range m.PlayIdx {
			v := m.PlayIdx[k]
			baseI := i
			i = encodeVarintUserFeature(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUserFeature(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUserFeature(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PlayTimeListT1) > 0 {
		for iNdEx := len(m.PlayTimeListT1) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PlayTimeListT1[iNdEx])
			copy(dAtA[i:], m.PlayTimeListT1[iNdEx])
			i = encodeVarintUserFeature(dAtA, i, uint64(len(m.PlayTimeListT1[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.PlayListT1) > 0 {
		for iNdEx := len(m.PlayListT1) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PlayListT1[iNdEx])
			copy(dAtA[i:], m.PlayListT1[iNdEx])
			i = encodeVarintUserFeature(dAtA, i, uint64(len(m.PlayListT1[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PlayTimeList) > 0 {
		for iNdEx := len(m.PlayTimeList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PlayTimeList[iNdEx])
			copy(dAtA[i:], m.PlayTimeList[iNdEx])
			i = encodeVarintUserFeature(dAtA, i, uint64(len(m.PlayTimeList[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PlayList) > 0 {
		for iNdEx := len(m.PlayList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PlayList[iNdEx])
			copy(dAtA[i:], m.PlayList[iNdEx])
			i = encodeVarintUserFeature(dAtA, i, uint64(len(m.PlayList[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClickTimeList) > 0 {
		for iNdEx := len(m.ClickTimeList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClickTimeList[iNdEx])
			copy(dAtA[i:], m.ClickTimeList[iNdEx])
			i = encodeVarintUserFeature(dAtA, i, uint64(len(m.ClickTimeList[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClickList) > 0 {
		for iNdEx := len(m.ClickList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClickList[iNdEx])
			copy(dAtA[i:], m.ClickList[iNdEx])
			i = encodeVarintUserFeature(dAtA, i, uint64(len(m.ClickList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserFeature(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserFeature(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserFeatureCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClickList) > 0 {
		for _, s := range m.ClickList {
			l = len(s)
			n += 1 + l + sovUserFeature(uint64(l))
		}
	}
	if len(m.ClickTimeList) > 0 {
		for _, s := range m.ClickTimeList {
			l = len(s)
			n += 1 + l + sovUserFeature(uint64(l))
		}
	}
	if len(m.PlayList) > 0 {
		for _, s := range m.PlayList {
			l = len(s)
			n += 1 + l + sovUserFeature(uint64(l))
		}
	}
	if len(m.PlayTimeList) > 0 {
		for _, s := range m.PlayTimeList {
			l = len(s)
			n += 1 + l + sovUserFeature(uint64(l))
		}
	}
	if len(m.PlayListT1) > 0 {
		for _, s := range m.PlayListT1 {
			l = len(s)
			n += 1 + l + sovUserFeature(uint64(l))
		}
	}
	if len(m.PlayTimeListT1) > 0 {
		for _, s := range m.PlayTimeListT1 {
			l = len(s)
			n += 1 + l + sovUserFeature(uint64(l))
		}
	}
	if len(m.PlayIdx) > 0 {
		for k, v := range m.PlayIdx {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovUserFeature(uint64(len(k))) + 1 + sovUserFeature(uint64(v))
			n += mapEntrySize + 1 + sovUserFeature(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUserFeature(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserFeature(x uint64) (n int) {
	return sovUserFeature(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserFeatureCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserFeature
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserFeatureCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserFeatureCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserFeature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserFeature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserFeature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClickList = append(m.ClickList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickTimeList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserFeature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserFeature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserFeature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClickTimeList = append(m.ClickTimeList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserFeature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserFeature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserFeature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayList = append(m.PlayList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayTimeList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserFeature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserFeature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserFeature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayTimeList = append(m.PlayTimeList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayListT1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserFeature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserFeature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserFeature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayListT1 = append(m.PlayListT1, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayTimeListT1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserFeature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserFeature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserFeature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayTimeListT1 = append(m.PlayTimeListT1, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayIdx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserFeature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserFeature
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserFeature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayIdx == nil {
				m.PlayIdx = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUserFeature
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserFeature
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUserFeature
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUserFeature
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUserFeature
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUserFeature(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUserFeature
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PlayIdx[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserFeature(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserFeature
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserFeature(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserFeature
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserFeature
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserFeature
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserFeature
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserFeature
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserFeature
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserFeature        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserFeature          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserFeature = fmt.Errorf("proto: unexpected end of group")
)
