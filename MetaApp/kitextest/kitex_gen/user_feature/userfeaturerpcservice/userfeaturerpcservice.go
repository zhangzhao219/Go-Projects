// Code generated by Kitex v0.6.0. DO NOT EDIT.

package userfeaturerpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user_feature "kitextest/kitex_gen/user_feature"
)

func serviceInfo() *kitex.ServiceInfo {
	return userFeatureRPCServiceServiceInfo
}

var userFeatureRPCServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserFeatureRPCService"
	handlerType := (*user_feature.UserFeatureRPCService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetUserFeature": kitex.NewMethodInfo(getUserFeatureHandler, newUserFeatureRPCServiceGetUserFeatureArgs, newUserFeatureRPCServiceGetUserFeatureResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user_feature",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.0",
		Extra:           extra,
	}
	return svcInfo
}

func getUserFeatureHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_feature.UserFeatureRPCServiceGetUserFeatureArgs)
	realResult := result.(*user_feature.UserFeatureRPCServiceGetUserFeatureResult)
	success, err := handler.(user_feature.UserFeatureRPCService).GetUserFeature(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserFeatureRPCServiceGetUserFeatureArgs() interface{} {
	return user_feature.NewUserFeatureRPCServiceGetUserFeatureArgs()
}

func newUserFeatureRPCServiceGetUserFeatureResult() interface{} {
	return user_feature.NewUserFeatureRPCServiceGetUserFeatureResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUserFeature(ctx context.Context, req *user_feature.Request) (r *user_feature.UserFeatureItem, err error) {
	var _args user_feature.UserFeatureRPCServiceGetUserFeatureArgs
	_args.Req = req
	var _result user_feature.UserFeatureRPCServiceGetUserFeatureResult
	if err = p.c.Call(ctx, "GetUserFeature", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
